{"version":3,"file":"static/webpack/static/development/pages/index.js.45c2e1033cfe5bfd2672.hot-update.js","sources":["webpack:///./src/lib/strategize.ts"],"sourcesContent":["import { MAX_CHUNK_THRESHOLD } from 'lib/bytes';\nimport { FileStatus } from 'store/types';\n\n// Limit of the max number of bytes that will be processed at a given time.\nconst MAX_TOTAL_BYTES = MAX_CHUNK_THRESHOLD * 2;\n\n// Devise file conversion strategy depending on file count and individual statuses and sizes.\n// Return tuple of lists containing files to convert and the remaining files to be pending.\nexport default function strategize(\n    files: Array<File>,\n): [Array<File>, Array<File>] {\n    const consideredFiles = [];\n    const convertFiles = [];\n    const pendingFiles = [];\n    let smallestFileSize = Infinity;\n\n    // Get total size of files currently being processed\n    let processingBytes = 0;\n\n    // Collect current file state details based on file statuses\n    for (const file of files) {\n        switch (+file.status) {\n            case FileStatus.Preparing:\n            case FileStatus.Converting:\n            case FileStatus.Downloading:\n                processingBytes += file.size;\n                break;\n            case FileStatus.Ready:\n            case FileStatus.Pending:\n                if (file.size < smallestFileSize) {\n                    smallestFileSize = file.size;\n                }\n\n                consideredFiles.push(file);\n                break;\n        }\n    }\n\n    let capacity = MAX_TOTAL_BYTES - processingBytes;\n\n    // No files can be processed if the smallest file is over capacity\n    if (smallestFileSize > capacity) {\n        return [[], consideredFiles];\n    }\n\n    // Use a reverse greedy approximation to solve the 0-1 knapsack problem to prioritize\n    // the parallelization of processing larger files one at a time with smaller files\n    consideredFiles.sort((a, b) => b.size - a.size);\n\n    for (const file of consideredFiles) {\n        if (capacity - file.size > 0) {\n            convertFiles.push(file);\n            capacity -= file.size;\n        } else {\n            pendingFiles.push(file);\n        }\n    }\n\n    return [convertFiles, pendingFiles];\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AARA;AAAA;AAAA;AACA;AADA;AAUA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AA1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA2BA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}