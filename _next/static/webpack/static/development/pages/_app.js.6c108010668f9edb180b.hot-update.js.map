{"version":3,"file":"static/webpack/static/development/pages/_app.js.6c108010668f9edb180b.hot-update.js","sources":["webpack:///./src/reducers/files.ts","webpack:///./src/store/types.ts"],"sourcesContent":["import {\n    FilesActions,\n    FilesState,\n    FileStatus,\n    ADD_FILES,\n    REMOVE_FILE,\n    UPDATE_STATUS,\n    UPDATE_LOG,\n    INIT_WORKER,\n    CREATE_FILE,\n    CREATE_MULTIPART_FILE,\n    CONVERT_FILE,\n    DOWNLOAD_FILE,\n} from 'store/types';\n\nconst initialState: FilesState = {\n    files: [],\n};\n\nfunction applyFileUpdate(\n    targetId: string,\n    key: WritableKeys<File>,\n    value: any,\n    update?: (file: File) => any,\n) {\n    return (file: File) => {\n        if (file.id !== targetId) {\n            return file;\n        }\n\n        // Ensure custom non-readonly file properties are carried over\n        const fileKeys: Array<WritableKeys<File>> = Object.keys(file) as any;\n        const fileToUpdate = new File([file], file.name);\n        fileKeys.forEach(key => {\n            fileToUpdate[key] = file[key];\n        });\n\n        // Update file properties\n        fileToUpdate[key] = update ? update(file) : value;\n\n        return fileToUpdate;\n    };\n}\n\nfunction unionFiles(uniqueFiles: Array<File>, file: File) {\n    return !uniqueFiles.some(f => f.id === file.id)\n        ? [...uniqueFiles, file]\n        : uniqueFiles;\n}\n\nexport default function filesReducer(\n    state: FilesState = initialState,\n    action: FilesActions,\n): FilesState {\n    switch (action.type) {\n        case ADD_FILES: {\n            const addedFiles = [...state.files, ...action.files];\n\n            return {\n                ...state,\n                files: addedFiles.reduce(unionFiles, [] as Array<File>),\n            };\n        }\n\n        case REMOVE_FILE: {\n            return {\n                ...state,\n                files: state.files.filter(file => file.id === action.file.id),\n            };\n        }\n\n        case UPDATE_STATUS:\n            return {\n                ...state,\n                files: state.files.map(\n                    applyFileUpdate(action.id, 'status', action.status),\n                ),\n            };\n\n        case UPDATE_LOG:\n            const update = (file: File) =>\n                action.overwrite\n                    ? [\n                          ...file.log.slice(0, file.log.length - 1),\n                          action.message,\n                      ]\n                    : [...file.log, action.message];\n            return {\n                ...state,\n                files: state.files.map(\n                    applyFileUpdate(action.id, 'log', action.message, update),\n                ),\n            };\n\n        case INIT_WORKER: {\n            return {\n                ...state,\n                files: state.files.map(\n                    applyFileUpdate(\n                        action.id,\n                        'status',\n                        FileStatus.Initializing,\n                    ),\n                ),\n            };\n        }\n\n        case CREATE_FILE:\n        case CREATE_MULTIPART_FILE:\n            return {\n                ...state,\n                files: state.files.map(\n                    applyFileUpdate(action.id, 'status', FileStatus.Preparing),\n                ),\n            };\n\n        case CONVERT_FILE:\n            return {\n                ...state,\n                files: state.files.map(\n                    applyFileUpdate(action.id, 'status', FileStatus.Converting),\n                ),\n            };\n\n        case DOWNLOAD_FILE:\n            return {\n                ...state,\n                files: state.files.map(\n                    applyFileUpdate(\n                        action.id,\n                        'status',\n                        FileStatus.Downloading,\n                    ),\n                ),\n            };\n\n        default:\n            return state;\n    }\n}\n","export enum FileStatus {\n    Waiting,\n    Initializing,\n    Ready,\n    Preparing,\n    Pending,\n    Converting,\n    Downloading,\n    Completed,\n}\n\n// Keyset actions\nexport const ADD_KEYSET = 'ADD_KEYSET';\n// Files actions\nexport const ADD_FILES = 'ADD_FILES';\nexport const REMOVE_FILE = 'REMOVE_FILE';\nexport const INIT_WORKER = 'INIT_WORKER';\nexport const CREATE_FILE = 'CREATE_FILE';\nexport const CREATE_MULTIPART_FILE = 'CREATE_MULTIPART_FILE';\nexport const UPDATE_STATUS = 'UPDATE_STATUS';\nexport const UPDATE_LOG = 'UPDATE_LOG';\nexport const CONVERT_FILE = 'CONVERT_FILE';\nexport const DOWNLOAD_FILE = 'DOWNLOAD_FILE';\n\n// Keyset state\nexport interface KeysetState {\n    file: File | null;\n}\nexport interface AddKeysetAction {\n    type: typeof ADD_KEYSET;\n    file: File;\n}\nexport type KeysetActions = AddKeysetAction;\n\n// Files state\nexport interface FilesState {\n    files: Array<File>;\n}\nexport interface AddFilesAction {\n    type: typeof ADD_FILES;\n    files: Array<File>;\n}\nexport interface RemoveFilesAction {\n    type: typeof ADD_FILES;\n    file: File;\n}\nexport interface UpdateStatusAction {\n    type: typeof UPDATE_STATUS;\n    id: string;\n    status: FileStatus;\n}\nexport interface UpdateLogAction {\n    type: typeof UPDATE_LOG;\n    id: string;\n    message: string;\n    overwrite?: boolean;\n}\nexport interface InitWorkerAction {\n    type: typeof INIT_WORKER;\n    id: string;\n}\nexport interface CreateFileAction {\n    type: typeof CREATE_FILE;\n    id: string;\n    file: File;\n}\nexport interface CreateMultiPartFileAction {\n    type: typeof CREATE_MULTIPART_FILE;\n    id: string;\n    file: File;\n}\nexport interface ConvertFileAction {\n    type: typeof CONVERT_FILE;\n    id: string;\n}\nexport interface DownloadFileAction {\n    type: typeof DOWNLOAD_FILE;\n    id: string;\n    nspName: string;\n}\nexport type FilesActions =\n    | AddFilesAction\n    | InitWorkerAction\n    | CreateFileAction\n    | CreateMultiPartFileAction\n    | UpdateStatusAction\n    | UpdateLogAction\n    | ConvertFileAction\n    | DownloadFileAction;\n\n// Store\nexport type Store = {\n    keyset: KeysetState;\n    files: FilesState;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAeA;AACA;AADA;AACA;AAGA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAEA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AAFA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AAMA;AAEA;AAFA;AACA;AAMA;AAAA;AACA;AAEA;AAFA;AAUA;AACA;AACA;AACA;AACA;AAEA;AAFA;AACA;AAMA;AACA;AAEA;AAFA;AACA;AAMA;AACA;AAEA;AAFA;AACA;AAUA;AACA;AAnFA;AAqFA;;;;;;;;;;;;AC3IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}