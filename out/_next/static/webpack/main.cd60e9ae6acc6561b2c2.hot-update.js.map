{"version":3,"file":"static/webpack/main.cd60e9ae6acc6561b2c2.hot-update.js","sources":["webpack:///./src/workers/xci.worker.ts"],"sourcesContent":["declare global {\n    interface Window {\n        FS: any;\n        Module: any;\n    }\n}\n\nconst types = {\n    PRINT: 'PRINT',\n    PRINT_ERR: 'PRINT_ERR',\n    RUNTIME_INITIALIZED: 'RUNTIME_INITIALIZED',\n    FILE_CREATED: 'FILE_CREATED',\n    FILE_CONVERTED: 'FILE_CONVERTED',\n    NSP_NAME_RETRIEVED: 'NSP_NAME_RETRIEVED',\n    WORKER_COMPLETED: 'WORKER_COMPLETED',\n};\n\nconst nspNames: Array<string> = [];\n\nself.Module = {\n    wasmMemory: new WebAssembly.Memory({\n        maximum: 3222000000,\n    }),\n    onRuntimeInitialized: function() {\n        self.postMessage({ action: types.RUNTIME_INITIALIZED });\n    },\n    print: function(message: string) {\n        const nspRegex = new RegExp(/(?:Game NSP|Update NSP:) \\d: (.+\\.nsp)/);\n\n        if (nspRegex.test(message)) {\n            const [, nspName] = nspRegex.exec(message) || [];\n            nspNames.push(nspName);\n        }\n\n        if (message.replace(/\\s/g, '').length) {\n            self.postMessage({ action: types.PRINT, message });\n        }\n    },\n    printErr: function(message: string) {\n        if (message.replace(/\\s/g, '').length) {\n            self.postMessage({ action: types.PRINT_ERR, message });\n        }\n    },\n};\n\n// Import emscripten glue code\nself.importScripts('4nxci.js');\n\nconst multipartFile = {\n    name: '',\n    data: [],\n};\n\nself.onmessage = (event: MessageEvent) => {\n    const data = event.data;\n\n    switch (data.action) {\n        case 'CREATE_FILE': {\n            if (self.FS.findObject(`/${data.name}`)) {\n                return;\n            }\n\n            const message = 'Creating file in virtual filesystem...';\n            self.postMessage({ action: types.PRINT, message });\n\n            self.Module['FS_createDataFile'](\n                '/',\n                data.name,\n                data.file,\n                true,\n                true,\n                true,\n            );\n\n            self.postMessage({\n                name: data.name,\n                fileType: data.fileType,\n                action: types.FILE_CREATED,\n            });\n\n            break;\n        }\n\n        case 'CREATE_MULTIPART_FILE': {\n            const { name, data } = multipartFile;\n\n            const message = 'Creating file in virtual filesystem...';\n            self.Module['FS_createDataFile']('/', name, data, true, true, true);\n\n            console.log(`Created ${multipartFile.name} in virtual filesystem.`);\n            self.postMessage({\n                name: multipartFile.name,\n                action: types.FILE_CREATED,\n            });\n\n            break;\n        }\n\n        case 'BUILD_MULTIPART_FILE':\n            if (!multipartFile.name) {\n                multipartFile.name = data.name;\n            }\n\n            multipartFile.data = multipartFile.data.concat(data.file);\n\n            break;\n\n        case 'CONVERT_FILE':\n            self.Module.callMain([\n                '-rk',\n                `/${data.keyset}`,\n                `/${data.filename}`,\n            ]);\n\n            self.postMessage({\n                name: data.filename,\n                action: types.FILE_CONVERTED,\n                nspNames: nspNames,\n            });\n\n            break;\n\n        case 'DOWNLOAD_FILE': {\n            const message = {\n                file: self.FS.findObject(`/${data.filename}`).contents,\n                filename: data.filename,\n                action: 'DOWNLOAD_FILE',\n            };\n\n            self.postMessage(message, [message.file.buffer]);\n\n            const index = nspNames.indexOf(data.filename);\n            if (index !== -1) {\n                nspNames.splice(index, 1);\n            }\n\n            if (!nspNames.length) {\n                self.postMessage({\n                    action: types.WORKER_COMPLETED,\n                });\n            }\n\n            break;\n        }\n    }\n};\n\nexport {};\n"],"mappings":";;;;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAEA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAvBA;AACA;AA0BA;AAEA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AASA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAvFA;AAyFA;AACA;;;;;A","sourceRoot":""}