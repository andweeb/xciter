{"version":3,"file":"static/webpack/static/development/pages/_app.js.669f0482c2fc277fc864.hot-update.js","sources":["webpack:///./src/middlewares/web-worker.ts"],"sourcesContent":["import { AnyAction, Dispatch, Middleware, Store } from 'redux';\nimport {\n    FilesActions,\n    ADD_KEYSET,\n    INIT_WORKER,\n    REMOVE_FILE,\n    CREATE_FILE,\n    CREATE_MULTIPART_FILE,\n    CONVERT_FILE,\n    DOWNLOAD_FILE,\n} from 'store/types';\nimport { updateLog, updateStatus } from 'actions/files';\nimport { FileStatus } from 'store/types';\nimport { abbreviateFileSize, MAX_CHUNK_THRESHOLD } from 'lib/bytes';\nimport XCIWorker from 'workers/XCIWorker';\n\ntype WebWorkerMiddleware = Middleware<Store, Function, Dispatch<AnyAction>>;\n\n// Maintain a map of workers in this middleware\nconst workers = new Map();\n\nconst middleware: WebWorkerMiddleware = store => next => action => {\n    const result = next(action);\n    const state = store.getState() as any;\n\n    switch (action.type) {\n        case INIT_WORKER: {\n            const keyset = state.keyset.file;\n\n            store.dispatch(\n                updateLog(\n                    action.id,\n                    'Setting up worker environment and WebAssembly runtime.',\n                ),\n            );\n\n            workers.set(\n                action.id,\n                new XCIWorker(action.id, keyset, store as Store),\n            );\n\n            break;\n        }\n\n        case ADD_KEYSET:\n            workers.forEach(worker => {\n                worker.keyset = action.file;\n                worker.createKeyset();\n            });\n            break;\n\n        case REMOVE_FILE:\n            const worker = workers.get(action.id);\n\n            if (worker) {\n                worker.terminateWorker();\n                workers.delete(action.id);\n            }\n\n            break;\n\n        case CREATE_FILE: {\n            const worker = workers.get(action.id);\n            const fileReader: FileReader = new FileReader();\n            let isFirstProgressMessage = true;\n            fileReader.onprogress = (event: ProgressEvent<FileReader>) => {\n                const shouldOverwrite = !isFirstProgressMessage;\n                const fileSize = abbreviateFileSize(event.loaded);\n                const message = `${fileSize} transferred to worker.`;\n\n                store.dispatch(updateLog(action.id, message, shouldOverwrite));\n                isFirstProgressMessage = false;\n            };\n\n            fileReader.onerror = (err: ProgressEvent<FileReader>) =>\n                console.error(`Error reading file`, err);\n\n            fileReader.onload = (event: ProgressEvent<FileReader>) => {\n                if (event.target && event.target.result) {\n                    worker.createFile(\n                        'xci',\n                        action.file.name,\n                        new Uint8Array(event.target.result as ArrayBuffer),\n                    );\n                }\n            };\n\n            fileReader.readAsArrayBuffer(action.file);\n\n            break;\n        }\n\n        case CREATE_MULTIPART_FILE: {\n            const worker = workers.get(action.id);\n            const fileReader: FileReader = new FileReader();\n            const fileChunks: Array<any> = [];\n            let transferIndex = 0;\n\n            // Split into multipart file chunks\n            for (let i = 0, index = 0; i < action.file.size; i += MAX_CHUNK_THRESHOLD, index++) {\n                const lastByte = i + MAX_CHUNK_THRESHOLD - 1;\n                const chunk = action.file.slice(i, lastByte);\n\n                fileChunks.push(chunk);\n            }\n\n            let isFirstProgressMessage = true;\n            fileReader.onprogress = (event: ProgressEvent<FileReader>) => {\n                const shouldOverwrite = !isFirstProgressMessage;\n                const fileSize = abbreviateFileSize(event.loaded);\n                const message = `${fileSize} transferred to worker.`;\n\n                store.dispatch(updateLog(action.id, message, shouldOverwrite));\n                isFirstProgressMessage = false;\n            };\n\n            fileReader.onerror = (err: ProgressEvent<FileReader>) =>\n                console.error(`Error reading file`, err);\n\n            fileReader.onload = (event: ProgressEvent<FileReader>) => {\n                transferIndex = transferIndex + 1;\n\n                // Build multipart file in the worker\n                if (event.target && event.target.result) {\n                    worker.buildMultiPartFile(\n                        action.file.name,\n                        new Uint8Array(event.target.result as ArrayBuffer),\n                    );\n                }\n\n                // Kick off next multipart chunk file or signal to create the file\n                if (fileChunks[transferIndex]) {\n                    fileReader.readAsArrayBuffer(fileChunks[transferIndex]);\n                } else {\n                    worker.createMultiPartFile();\n                }\n            };\n\n            // Start multipart file transfer\n            fileReader.readAsArrayBuffer(fileChunks[transferIndex]);\n\n            break;\n        }\n\n        case CONVERT_FILE: {\n            const worker = workers.get(action.id);\n\n            worker.convertFile();\n\n            break;\n        }\n\n        case DOWNLOAD_FILE: {\n            const worker = workers.get(action.id);\n\n            worker.downloadFile(action.nspName);\n\n            break;\n        }\n    }\n\n    return result;\n};\n\nexport default middleware;\n"],"mappings":";;;;;;;;;;;;;;;;;;AACA;AAUA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAOA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AArIA;AACA;AAuIA;AACA;AA7IA;AAAA;AACA;AA8IA;;;;A","sourceRoot":""}