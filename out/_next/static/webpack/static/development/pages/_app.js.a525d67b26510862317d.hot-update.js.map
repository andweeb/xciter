{"version":3,"file":"static/webpack/static/development/pages/_app.js.a525d67b26510862317d.hot-update.js","sources":["webpack:///./src/workers/XCIWorker.ts"],"sourcesContent":["import { Store } from 'redux';\nimport {\n    convertFile,\n    downloadFile,\n    updateLog,\n    updateStatus,\n    finishFile,\n} from 'actions/files';\nimport { FileStatus } from 'store/types';\n// @ts-ignore\nimport WebWorker from './xci.worker';\n\nexport default class XCIWorker {\n    id: string;\n    store: Store;\n    keyset: File;\n    worker: Worker;\n    filename: string | null;\n\n    constructor(id: string, keyset: File, store: Store) {\n        this.id = id;\n        this.store = store;\n        this.worker = new WebWorker();\n        this.worker.onmessage = this.onWorkerMessage;\n        this.keyset = keyset;\n        this.filename = null;\n    }\n\n    createKeyset = () => {\n        const fileReader: FileReader = new FileReader();\n\n        fileReader.onload = (event: ProgressEvent<FileReader>) => {\n            if (event.target && event.target.result) {\n                this.createFile(\n                    'keyset',\n                    this.keyset.name,\n                    new Uint8Array(event.target.result as ArrayBuffer),\n                );\n            }\n        };\n\n        fileReader.readAsArrayBuffer(this.keyset);\n    };\n\n    onWorkerMessage = (event: MessageEvent) => {\n        const data = event.data;\n\n        switch (data.action) {\n            case 'PRINT': {\n                const { files } = this.store.getState().files;\n                const file = files.find((file: File) => file.id === this.id);\n                this.store.dispatch(\n                    updateLog(\n                        this.id,\n                        data.message,\n                        file ? file.status : undefined,\n                    ),\n                );\n                break;\n            }\n\n            case 'PRINT_WARNING':\n                this.store.dispatch(\n                    updateLog(this.id, data.message, FileStatus.Warning),\n                );\n                break;\n\n            case 'PRINT_ERROR':\n                this.store.dispatch(\n                    updateLog(this.id, data.message, FileStatus.Error),\n                );\n                break;\n\n            case 'RUNTIME_INITIALIZED': {\n                if (this.keyset) {\n                    this.createKeyset();\n                }\n\n                this.store.dispatch(\n                    updateLog(\n                        this.id,\n                        'WebAssembly runtime initialized.',\n                        FileStatus.Ready,\n                    ),\n                );\n\n                break;\n            }\n\n            case 'FILE_CREATED':\n                this.filename = data.name;\n\n                this.store.dispatch(\n                    updateLog(\n                        this.id,\n                        `Created ${data.name} in virtual filesystem.`,\n                        FileStatus.Ready,\n                        true,\n                    ),\n                );\n\n                if (data.fileType === 'xci') {\n                    this.store.dispatch(convertFile(this.id));\n                }\n\n                break;\n\n            case 'FILE_CONVERTED': {\n                this.store.dispatch(\n                    updateLog(this.id, `Converted ${data.name}.`),\n                );\n\n                // Trigger NSP file downloads\n                data.nspNames.forEach((nspName: string) =>\n                    this.store.dispatch(downloadFile(this.id, nspName)),\n                );\n\n                break;\n            }\n\n            case 'DOWNLOAD_FILE': {\n                const a = window.document.createElement('a');\n                a.href = window.URL.createObjectURL(\n                    new Blob([data.file], { type: 'application/octet-stream' }),\n                );\n                a.download = data.filename;\n\n                // Append anchor to body.\n                document.body.appendChild(a);\n                a.click();\n\n                // Remove anchor from body\n                document.body.removeChild(a);\n\n                break;\n            }\n\n            case 'WORKER_COMPLETED':\n                this.store.dispatch(\n                    finishFile(this.id, `Job completed for ${this.filename}.`),\n                );\n\n                this.terminateWorker();\n                break;\n        }\n    };\n\n    createFile(fileType: string, name: string, data: Uint8Array) {\n        const message = {\n            name,\n            fileType,\n            file: data,\n            action: 'CREATE_FILE',\n        };\n\n        this.worker.postMessage(message, [message.file.buffer]);\n    }\n\n    buildMultiPartFile(name: string, data: Uint8Array) {\n        const message = {\n            name,\n            file: data,\n            action: 'BUILD_MULTIPART_FILE',\n        };\n\n        this.worker.postMessage(message, [message.file.buffer]);\n    }\n\n    createMultiPartFile(name: string, data: Uint8Array) {\n        this.worker.postMessage({ action: 'CREATE_MULTIPART_FILE' });\n    }\n\n    convertFile() {\n        this.worker.postMessage({\n            id: this.id,\n            filename: this.filename,\n            keyset: this.keyset.name,\n            action: 'CONVERT_FILE',\n        });\n    }\n\n    downloadFile(nspName: string) {\n        this.store.dispatch(updateLog(this.id, `Downloading ${nspName}...`));\n\n        this.worker.postMessage({\n            filename: nspName,\n            action: 'DOWNLOAD_FILE',\n        });\n    }\n\n    terminateWorker() {\n        this.worker.terminate();\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA;AAOA;AACA;AACA;AACA;AACA;;;AAOA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AAUA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAxBA;AA0BA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAhGA;AAkGA;AACA;AA9HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAwHA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;;;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;;;;;;;;;;A","sourceRoot":""}